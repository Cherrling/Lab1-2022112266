src/lab1.cpp:1:0: information: Include file: <iostream> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <iostream>
^
src/lab1.cpp:2:0: information: Include file: <fstream> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <fstream>
^
src/lab1.cpp:3:0: information: Include file: <string> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <string>
^
src/lab1.cpp:4:0: information: Include file: <cctype> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <cctype>
^
src/lab1.cpp:5:0: information: Include file: <map> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <map>
^
src/lab1.cpp:6:0: information: Include file: <vector> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <vector>
^
src/lab1.cpp:7:0: information: Include file: <algorithm> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <algorithm>
^
src/lab1.cpp:8:0: information: Include file: <iomanip> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <iomanip>
^
src/lab1.cpp:9:0: information: Include file: <cstdlib> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <cstdlib>
^
src/lab1.cpp:10:0: information: Include file: <limits> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <limits>  // 添加到其他头文件后面
^
src/lab1.cpp:11:0: information: Include file: <ctime> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <ctime>  // 添加到其他头文件后面
^
src/lab1.cpp:12:0: information: Include file: <queue> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <queue>  // 添加到其他头文件后面
^
src/lab1.cpp:13:0: information: Include file: <climits> not found. Please note: Cppcheck does not need standard library headers to get proper results. [missingIncludeSystem]
#include <climits>  // 添加到其他头文件后面，用于INT_MAX
^
src/lab1.cpp:0:0: information: Limiting analysis of branches. Use --check-level=exhaustive to analyze all branches. [normalCheckLevelMaxBranches]

^
src/lab1.cpp:57:10: style: inconclusive: Technically the member function 'DirectedGraph::printGraph' can be const. [functionConst]
    void printGraph() {
         ^
src/lab1.cpp:86:10: style: inconclusive: Technically the member function 'DirectedGraph::exportToDOT' can be const. [functionConst]
    bool exportToDOT(const std::string& filename) {
         ^
src/lab1.cpp:119:10: performance: inconclusive: Technically the member function 'DirectedGraph::generateImage' can be static (but you may consider moving to unnamed namespace). [functionStatic]
    bool generateImage(const std::string& dotFilename, const std::string& outputFilename) {
         ^
src/lab1.cpp:290:10: style: inconclusive: Technically the member function 'DirectedGraph::exportToDOTWithPath' can be const. [functionConst]
    bool exportToDOTWithPath(const std::string& filename, const std::vector<std::string>& path) {
         ^
src/lab1.cpp:430:35: style: inconclusive: Technically the member function 'DirectedGraph::calculatePageRank' can be const. [functionConst]
    std::map<std::string, double> calculatePageRank(double dampingFactor = 0.85, int iterations = 100, double tolerance = 1e-6) {
                                  ^
src/lab1.cpp:496:35: style: inconclusive: Technically the member function 'DirectedGraph::calculatePageRankWithTFIDF' can be const. [functionConst]
    std::map<std::string, double> calculatePageRankWithTFIDF(double dampingFactor = 0.85, int iterations = 100, double tolerance = 1e-6) {
                                  ^
src/lab1.cpp:938:41: style: The scope of the variable 'pathImageFilename' can be reduced. [variableScope]
                            std::string pathImageFilename = baseName + "_path.png";
                                        ^
src/lab1.cpp:669:25: style: Local variable 'input' shadows outer variable [shadowVariable]
            std::string input;
                        ^
src/lab1.cpp:628:21: note: Shadowed declaration
        std::string input;
                    ^
src/lab1.cpp:669:25: note: Shadow variable
            std::string input;
                        ^
src/lab1.cpp:685:26: style: Parameter 'argv' can be declared as const array [constParameter]
int main(int argc, char* argv[]) {
                         ^
src/lab1.cpp:700:28: performance: Ineffective call of function 'substr' because a prefix of the string is assigned to itself. Use resize() or pop_back() instead. [uselessCallsSubstr]
                baseName = baseName.substr(0, lastDot);
                           ^
src/lab1.cpp:741:36: performance: Ineffective call of function 'substr' because a prefix of the string is assigned to itself. Use resize() or pop_back() instead. [uselessCallsSubstr]
                        baseName = baseName.substr(0, lastDot);
                                   ^
src/lab1.cpp:46:32: style: Consider using std::find_if algorithm instead of a raw loop. [useStlAlgorithm]
            if (edge.to == to) {
                               ^
src/lab1.cpp:151:47: style: Consider using std::any_of algorithm instead of a raw loop. [useStlAlgorithm]
                    if (nextEdge.to == word2) {
                                              ^
src/lab1.cpp:465:37: style: Consider using std::accumulate algorithm instead of a raw loop. [useStlAlgorithm]
                        totalWeight += edge.weight;
                                    ^
src/lab1.cpp:479:22: style: Consider using std::accumulate algorithm instead of a raw loop. [useStlAlgorithm]
                diff += std::abs(newPageRank[node.first] - pageRank[node.first]);
                     ^
src/lab1.cpp:516:27: style: Consider using std::accumulate algorithm instead of a raw loop. [useStlAlgorithm]
            totalInDegree += degree.second;
                          ^
src/lab1.cpp:539:23: style: Consider using std::accumulate algorithm instead of a raw loop. [useStlAlgorithm]
                sumPR += pr.second;
                      ^
src/lab1.cpp:572:37: style: Consider using std::accumulate algorithm instead of a raw loop. [useStlAlgorithm]
                        totalWeight += edge.weight;
                                    ^
src/lab1.cpp:586:22: style: Consider using std::accumulate algorithm instead of a raw loop. [useStlAlgorithm]
                diff += std::abs(newPageRank[node.first] - pageRank[node.first]);
                     ^
src/lab1.cpp:1005:37: style: Consider using std::copy algorithm instead of a raw loop. [useStlAlgorithm]
                        rankedWords.push_back(pr);
                                    ^
src/lab1.cpp:502:35: style: Variable 'outDegree[node.first]' is assigned a value that is never used. [unreadVariable]
            outDegree[node.first] = node.second.size();
                                  ^
nofile:0:0: information: Active checkers: 179/856 (use --checkers-report=<filename> to see details) [checkersReport]

